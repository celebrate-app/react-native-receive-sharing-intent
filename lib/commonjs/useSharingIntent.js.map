{"version":3,"sources":["useSharingIntent.ts"],"names":["ReceiveSharingIntent","NativeModules","isIos","Platform","OS","useSharingIntent","handler","errorHandler","protocol","getFileNames","url","then","data","files","catch","e","fileObject","Object","keys","map","k","Linking","getInitialURL","res","startsWith","listener","addEventListener","remove","AppState","status"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,0BAAjC;AAEA,MAAMC,KAAK,GAAGC,sBAASC,EAAT,KAAgB,KAA9B;;AAEO,SAASC,gBAAT,CACLC,OADK,EAELC,YAFK,EAGLC,QAAgB,GAAG,YAHd,EAIL;AACA,QAAMC,YAAY,GAAG,wBAClBC,GAAD,IAAiB;AACf,QAAIR,KAAJ,EAAW;AACTF,MAAAA,oBAAoB,CAACS,YAArB,CAAkCC,GAAlC,EACGC,IADH,CACSC,IAAD,IAAe;AACnB,cAAMC,KAAK,GAAG,qBAASD,IAAT,CAAd;AACAN,QAAAA,OAAO,CAACO,KAAD,CAAP;AACD,OAJH,EAKGC,KALH,CAKUC,CAAD,IAAYR,YAAY,CAACQ,CAAD,CALjC;AAMD,KAPD,MAOO;AACLf,MAAAA,oBAAoB,CAACS,YAArB,GACGE,IADH,CACSK,UAAD,IAAqB;AACzB,cAAMH,KAAK,GAAGI,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,GAAxB,CAA6BC,CAAD,IAAOJ,UAAU,CAACI,CAAD,CAA7C,CAAd;AACAd,QAAAA,OAAO,CAACO,KAAD,CAAP;AACD,OAJH,EAKGC,KALH,CAKUC,CAAD,IAAYR,YAAY,CAACQ,CAAD,CALjC;AAMD;AACF,GAjBkB,EAkBnB,CAACT,OAAD,EAAUC,YAAV,CAlBmB,CAArB;AAqBA,wBAAU,MAAM;AACd,QAAIL,KAAJ,EAAW;AACTmB,2BAAQC,aAAR,GACGX,IADH,CACSY,GAAD,IAAc;AAClB,YAAIA,GAAJ,aAAIA,GAAJ,eAAIA,GAAG,CAAEC,UAAL,CAAiB,GAAEhB,QAAS,YAA5B,CAAJ,EAA8C;AAC5CC,UAAAA,YAAY,CAACc,GAAD,CAAZ;AACD;AACF,OALH,EAMGT,KANH,CAMS,MAAM,CAAE,CANjB;;AAQA,YAAMW,QAAa,GAAGJ,qBAAQK,gBAAR,CAAyB,KAAzB,EAAiCH,GAAD,IAAc;AAClE,cAAMb,GAAG,GAAGa,GAAG,GAAGA,GAAG,CAACb,GAAP,GAAa,EAA5B;;AACA,YAAIA,GAAG,CAACc,UAAJ,CAAgB,GAAEhB,QAAS,YAA3B,CAAJ,EAA6C;AAC3CC,UAAAA,YAAY,CAACc,GAAG,CAACb,GAAL,CAAZ;AACD;AACF,OALqB,CAAtB;;AAOA,aAAO,MAAM;AACXe,QAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,MAAV;AACD,OAFD;AAGD,KAnBD,MAmBO;AACL,YAAMF,QAAa,GAAGG,sBAASF,gBAAT,CACpB,QADoB,EAEnBG,MAAD,IAAoB;AAClB,YAAIA,MAAM,KAAK,QAAf,EAAyB;AACvBpB,UAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;AACF,OANmB,CAAtB;;AASA,aAAO,MAAM;AACXgB,QAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,MAAV;AACD,OAFD;AAGD;AACF,GAlCD,EAkCG,CAAClB,YAAD,EAAeD,QAAf,CAlCH;AAmCD","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { AppState, Linking, NativeModules, Platform } from 'react-native';\n\nimport { sortData } from './utils';\nconst { ReceiveSharingIntent } = NativeModules;\n\nconst isIos = Platform.OS === 'ios';\n\nexport function useSharingIntent(\n  handler: Function,\n  errorHandler: Function,\n  protocol: string = 'ShareMedia'\n) {\n  const getFileNames = useCallback(\n    (url: string) => {\n      if (isIos) {\n        ReceiveSharingIntent.getFileNames(url)\n          .then((data: any) => {\n            const files = sortData(data);\n            handler(files);\n          })\n          .catch((e: any) => errorHandler(e));\n      } else {\n        ReceiveSharingIntent.getFileNames()\n          .then((fileObject: any) => {\n            const files = Object.keys(fileObject).map((k) => fileObject[k]);\n            handler(files);\n          })\n          .catch((e: any) => errorHandler(e));\n      }\n    },\n    [handler, errorHandler]\n  );\n\n  useEffect(() => {\n    if (isIos) {\n      Linking.getInitialURL()\n        .then((res: any) => {\n          if (res?.startsWith(`${protocol}://dataUrl`)) {\n            getFileNames(res);\n          }\n        })\n        .catch(() => {});\n\n      const listener: any = Linking.addEventListener('url', (res: any) => {\n        const url = res ? res.url : '';\n        if (url.startsWith(`${protocol}://dataUrl`)) {\n          getFileNames(res.url);\n        }\n      });\n\n      return () => {\n        listener?.remove();\n      };\n    } else {\n      const listener: any = AppState.addEventListener(\n        'change',\n        (status: string) => {\n          if (status === 'active') {\n            getFileNames('');\n          }\n        }\n      );\n\n      return () => {\n        listener?.remove();\n      };\n    }\n  }, [getFileNames, protocol]);\n}\n"]}