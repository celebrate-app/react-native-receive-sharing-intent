{"version":3,"sources":["utils.ts"],"names":["getFileName","file","replace","getExtension","fileName","substring","lastIndexOf","getMimeType","ext","extension","toLowerCase","type","Object","entries","MimeTypes","find","mime","extensions","includes","sortData","data","objects","filePath","text","weblink","mimeType","contentUri","startsWith","object","files","JSON","parse","i","length","path","obj","extra","push","error"],"mappings":"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","sourcesContent":["import MimeTypes from 'mime-db';\n\ninterface IReturnData {\n  filePath?: any | string;\n  text?: any | string;\n  weblink?: any | string;\n  mimeType?: any | string;\n  contentUri?: any | string;\n  fileName?: any | string;\n  extension?: any | string;\n  extra?: any;\n}\n\nconst getFileName = (file: string): string => {\n  return file.replace(/^.*(\\\\|\\/|:)/, '');\n};\n\nconst getExtension = (fileName: string): string => {\n  return fileName.substring(fileName.lastIndexOf('.') + 1);\n};\n\nconst getMimeType = (file: string): string => {\n  const ext = getExtension(file);\n  const extension = '.' + ext.toLowerCase();\n  const type = Object.entries(MimeTypes).find(\n    (mime) => mime[1]?.extensions && mime[1]?.extensions.includes(extension)\n  );\n\n  if (type) return type[0];\n  return '';\n};\n\nexport function sortData(data: any): IReturnData[] {\n  const objects: IReturnData = {\n    filePath: null,\n    text: null,\n    weblink: null,\n    mimeType: null,\n    contentUri: null,\n    fileName: null,\n    extension: null,\n  };\n\n  const file = data;\n\n  if (file.startsWith('text:')) {\n    const text = file.replace('text:', '');\n    if (text.startsWith('http')) {\n      const object: IReturnData[] = [{ ...objects, weblink: text }];\n      return object;\n    }\n    const object = [{ ...objects, text }];\n    return object;\n  } else if (file.startsWith('webUrl:')) {\n    const weblink: string = file.replace('webUrl:', '');\n    const object: IReturnData[] = [{ ...objects, weblink }];\n    return object;\n  } else {\n    try {\n      const files = JSON.parse(file);\n      const object = [];\n      for (let i = 0; i < files.length; i++) {\n        const path = files[i].path;\n        const obj = {\n          ...objects,\n          fileName: getFileName(path),\n          extension: getExtension(path),\n          mimeType: getMimeType(path),\n          filePath: path,\n          extra: files[i].extra,\n        };\n        object.push(obj);\n      }\n      return object;\n    } catch (error) {\n      return [{ ...objects }];\n    }\n  }\n}\n"]}